snippet $http
	\$http('${1:GET|POST|PUT|DELETE}', ${2:url}${3:, ${4:post}}, ${5:function(status, response){
		${6:// success}
	}}${7:, function(status, response){
		${8:// error}
	}}){$0}

snippet $lower
	angular.lowercase(${1:string}){$0}


snippet $extend
	angular.extend(${1:destinationObject}, ${2:sourceObject})


snippet $filter
	$filter('${1:currency|date|filter|json|limitTo|linky|lowercase|number|orderBy|uppercase}')(${2:array}${3:, ${4:expression}}){$0}


snippet $def
	angular.isDefined(${1:value})


snippet $emit
	.$emit('${1:name}', ${2:arguments}){$0}

snippet $route
	$routeProvider.when('$1', {template: '$2', controller: $3}){$0}


snippet $string
	angular.isString(${1:value})


snippet $num
	angular.isNumber(${1:value})


snippet dir
	directive('{$1}', function({$2}){
		${5:// Runs during compile}
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			// cont­rol­ler: function(scope, element, attrs, transclue) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			// templateUrl: '',
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function(scope, iElm, iAttrs, controller) {
				{$0}
			}
		};
	}]){$0}

snippet $broadcast
	$broadcast('${1:name}', ${2:arguments}){$0}


snippet $each
	angular.forEach(${1:values}, function(${2:value}, ${3:key}){
		{$0}
	}){$0}


snippet $upper
	angular.uppercase(${1:string}){$0}


snippet $copy
	angular.copy(${1:source}${2:, ${3:destination}})

snippet $eq
	angular.equals(${1:object1}, ${2:object2}){$0}


snippet $is
	angular.isFunction(${1:value})

snippet $array
	angular.isArray(${1:value})


snippet mod
	/**
	 * $1 Module
	 *
	 * ${2:Description}
	 */
	angular.module('{$1}', [{$3}]).{$0}



snippet $new
	.$new(${1:isolate}){$0}


snippet $obj
	angular.isObject(${1:value})


snippet $on
	.$on('${1:name}', ${2:function(){$3}}){$0}


snippet $watch
	$watch('${1:name}', function(scope, newValue, oldValue) {
		{$0}
	}){$0}
